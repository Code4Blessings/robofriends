{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","robots","map","user","i","components_Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_Searchbox","components_Scroll","components_ErrorBoundary","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce36b393.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  return(\n    <div className='tc bg-light-green dib pa3 br3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  return(\n    <div>\n     {\n       robots.map((user, i) => {\n       return (\n         <Card\n           key={i}\n           id={robots[i].id}\n           name={robots[i].name}\n           email={robots[i].email}\n         />\n       );\n     })\n   };\n  </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\n\nconst Searchbox = ({ searchfield, searchChange }) => {\n  return (\n      <div className='pa2'>\n      <input className='pa3 ba b--green bg-lightest blue'\n         type='search'\n          placeholder='search robots'\n          onChange={searchChange}\n        />\n      </div>\n  );\n}\n\nexport default Searchbox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, state) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Ooops that is not good</h1>\n    }\n      return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\ncomponentDidMount() {\n  fetch('http://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({ robots: users }));\n}\n\nonSearchChange = (event) => {\n  this.setState({ searchfield: event.target.value })\n}\n\nrender() {\n  const { robots, searchfield } = this.state;\n  const filteredRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  })\n   return !robots.length ?\n    <h1>Loading</h1> :\n      (\n        <div className='tc'>\n        <h1 className='f1'>Robofriends</h1>\n        <Searchbox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n          <CardList robots={filteredRobots}/>\n        </ErrorBoundary>\n      </Scroll>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}